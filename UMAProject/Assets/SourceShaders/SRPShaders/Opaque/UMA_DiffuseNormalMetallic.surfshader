BEGIN_OPTIONS
   ShaderName "UMA/Diffuse_Normal_Metallic"
   Stackable "False"
   Workflow "Metallic"
END_OPTIONS

BEGIN_PROPERTIES

    [BetterHeader(Material Specific)]
    _Color ("Main Color", Color) = (1, 1, 1, 1)
	_ColorModulation ("Color Modulation", Range(0,2)) = 1
	_MetallicModulation ("Metallic Level", Range(0,2)) = 1
	_SmoothnessModulation ("Smoothness Level", Range(0,2)) = 1
	[BetterHeader(Lighting Adjustment)]
    [Toggle]_UseHalfLambert ("Use Half Lambert", Float) = 0
    _HalfLambertStrength ("Lambert(0), HalfLambert(1)", Range(0,16)) = 1
    _RimLightingModulation ("Rim Lighting Level", Float) = 0
	_RimLightColor("Rim Light Color", Color) = (1,1,1,1)
	_RimLightPower("Rim Light Power", Range(0.5, 12)) = 4

    [Enum(Off,0,Front,1,Back,2)]_CullMode("Culling Mode", Float) = 2
    [Enum(Flip, 0, Mirror, 1, None, 2)] _DoubleSidedNormalMode("Double sided normal mode", Float) = 1

    _BaseMap("BaseMap", 2D) = "white" {}
    _BumpMap("BumpMap", 2D) = "bump" {}
    _NormalStrength ("Normal Strength", Range(0,2)) = 1
    _MetallicGlossMap("MetallicGlossMap", 2D) = "black" {}
    _UberTile("Uber Tile", Range(0,16)) = 1

END_PROPERTIES

BEGIN_PASS("All")
   Cull [_CullMode]
END_PASS

// Any variables you want to have in the per material CBuffer go here.
BEGIN_CBUFFER
    half4 _Color;
	half  _ColorModulation;
	half  _SmoothnessModulation;
	half  _MetallicModulation;
    half  _EmissiveModulation;
    half _HalfLambertStrength;
    float _DoubleSidedNormalMode;
    half3 _RimLightColor;
	half  _RimLightPower;
    float _RimLightingModulation;
    float _NormalStrength;
    float _UseHalfLambert;
    float _UberTile;

    float4 _BaseMap_ST;
    float4 _BumpMap_ST;
    float4 _MetallicGlossMap_ST;
END_CBUFFER


// All code goes here
BEGIN_CODE

   TEXTURE2D(_BaseMap);
   SAMPLER(sampler_BaseMap);
   TEXTURE2D(_BumpMap);
   SAMPLER(sampler_BumpMap);
   TEXTURE2D(_MetallicGlossMap);
   SAMPLER(sampler_MetallicGlossMap);


	void SurfaceFunction(inout Surface o, ShaderData d)
	{
      float2 auv = d.texcoord0.xy * (_UberTile * _BaseMap_ST.xy) + _BaseMap_ST.zw;
      float2 nuv = d.texcoord0.xy * (_UberTile * _BumpMap_ST.xy) + _BumpMap_ST.zw;
      float2 mguv = d.texcoord0.xy * (_UberTile * _MetallicGlossMap_ST.xy) + _MetallicGlossMap_ST.zw;
      
	  half4 mask = SAMPLE_TEXTURE2D(_MetallicGlossMap,sampler_MetallicGlossMap,mguv);
	  half4 base_c = SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, auv);
	  half4 basepackednormal = SAMPLE_TEXTURE2D(_BumpMap, sampler_BumpMap,nuv);
	  half3 base_n = UnpackScaleNormal(basepackednormal,_NormalStrength);

	  half base_smooth = mask.a;
	  half base_Metallic = mask.r;

      //o.Alpha  = base_c.a * _Color.a; 
      o.Albedo = base_c.rgb   * _ColorModulation * _Color.rgb;

	  o.Normal = base_n;
	  o.Metallic = base_Metallic * _MetallicModulation;
	  o.Smoothness = base_smooth * _SmoothnessModulation;

      if (_DoubleSidedNormalMode == 0)
      {
         o.Normal *= d.isFrontFace ? 1 : -1;
      }
      else if (_DoubleSidedNormalMode == 1)
      {
		 o.Normal.z *= d.isFrontFace ? 1 : -1;
      }


    if (_UseHalfLambert) 
    { 
	    float3 lightDir;
        float3 lightColor;
	    GetSun(lightDir, lightColor);
	    float3 normalDirection = TangentToWorldSpace(d, o.Normal);
	    float atten = 1.0;
	    float lambert = dot(normalDirection, lightDir);

        lambert = lerp(lambert, lambert * 0.5 + 0.5, _HalfLambertStrength);
        o.Albedo *= atten * lightColor * lambert;        
     }

     if (_RimLightingModulation>0) 
     { 
	    float rim = 1.0 - saturate(dot(d.tangentSpaceViewDir, o.Normal)); 
	    o.Emission += (pow(rim, _RimLightPower) * _RimLightColor) * _RimLightingModulation;  
      }
	}

END_CODE

